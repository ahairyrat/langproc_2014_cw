POINTER ::= '*'
COMMA ::= ','
OPEN_BRACKET ::= '('
CLOSE_BRACKET ::= ')'
OPEN_CURLY_BRACKET ::= '{'
CLOSE_CURLY_BRACKET ::= '}'
OPEN_SQUARE_BRACKET ::= '['
CLOSE_SQUARE_BRACKET ::= ']'
SEMI_COLON ::= ';'
COLON ::= ':'
ADDRESS ::= '&'
FULL_STOP ::= '.'
LESS_THAN ::= '<'
GREATER_THAN '>'
EQUALS ::= '='
PLUS ::= '+'
MINUS ::= '-'
MULTIPLY ::= '*'
DIVIDE ::= '/'
ESCAPE ::= '\'
END_OF_LINE ::= ESCAPE 'n'
END_OF_FILE ::= ESCAPE '0'
ESCAPE_SINGLE_QUOTES ::= ESCAPE SINGLE_QUOTES
ESCAPE_DOUBLE_QUOTES ::= ESCAPE DOUBLE_QUOTES
DOUBLE_QUOTES ::= '"'
SINGLE_QUOTES ::= '''
NOT ::= !
NOT_EQUALS ::= NOT EQUALS
MODULUS ::= '%'
LOGICAL_EQUALS ::= EQUALS EQUALS
LOGICAL LESS_THAN_EQUALS ::= LESS_THAN EQUALS




term ::= 

function_call ::= FUNCTION_NAME OPEN_BRACKET variable_list CLOSE BRACKET

function_definition ::= type_id FUNCTION_NAME OPEN_BRACKET parameter_list CLOSE_BRACKET OPEN_CURLY_BRACKET function_body CLOSE_CURLY_BRACKET

expression ::= 

variable_list ::= variable COMMA variable_list | variable

parameter_list ::= (parameter COMMA | parameter) | EPSILON

parameter ::= type_id NAME

variable ::= 

type_id ::= types | types POINTER 