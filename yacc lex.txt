POINTER ::= '*'
COMMA ::= ','
OPEN_BRACKET ::= '('
CLOSE_BRACKET ::= ')'
OPEN_CURLY_BRACKET ::= '{'
CLOSE_CURLY_BRACKET ::= '}'
OPEN_SQUARE_BRACKET ::= '['
CLOSE_SQUARE_BRACKET ::= ']'
SEMI_COLON ::= ';'
COLON ::= ':'
ADDRESS ::= '&'
FULL_STOP ::= '.'
LESS_THAN ::= '<'
GREATER_THAN '>'
EQUALS ::= '='
PLUS ::= '+'
MINUS ::= '-'
MULTIPLY ::= '*'
DIVIDE ::= '/'
ESCAPE ::= '\'
END_OF_LINE ::= ESCAPE 'n'
END_OF_FILE ::= ESCAPE '0'
ESCAPE_SINGLE_QUOTES ::= ESCAPE SINGLE_QUOTES
ESCAPE_DOUBLE_QUOTES ::= ESCAPE DOUBLE_QUOTES
DOUBLE_QUOTES ::= '"'
SINGLE_QUOTES ::= '''
NOT ::= !
NOT_EQUALS ::= NOT EQUALS
MODULUS ::= '%'
LOGICAL_EQUALS ::= EQUALS EQUALS
LOGICAL LESS_THAN_EQUALS ::= LESS_THAN EQUALS
INT ::= 'int'
CHAR ::= 'char'
DOUBLE ::= 'double'
FLOAT ::= 'float'
SIGNED ::= 'signed'
UNSIGNED ::= 'unsigned'
SHORT ::= 'short'+
LONG ::= 'long'+
VOID ::= 'void'
CONST ::= 'const'
VOLATILE ::= 'volatile'
VARIABLE_NAME ::= (LETTER | UNDERSCORE) (LETTER | NUMBER | UNDERSCORE)*
UNDERSCORE ::= '_'
LETTER ::= 'a'->'z' | 'A' -> 'Z'
NUMBER ::= '0' -> '9'

type_non_pointer ::= type_qualifier? (type_specifier? basic_type | custom_type) type_qualifier?

basic_type ::= INT | CHAR | DOUBLE | FLOAT | VOID
type_specifier ::= SIGNED | UNSIGNED | SHORT | LONG
type_qualifier ::= (CONST | VOLATILE) (CONST | VOLATILE)

type_pointer ::= type POINTER CONST?

custom_type  ::= TYPEDEF

type ::= type_non_pointer | type_pointer 

term ::= 

function_call ::= FUNCTION_NAME OPEN_BRACKET variable_list CLOSE BRACKET

function_definition ::= type_id FUNCTION_NAME OPEN_BRACKET variable_list? CLOSE_BRACKET OPEN_CURLY_BRACKET function_body CLOSE_CURLY_BRACKET

expression ::= 

variable_list ::= variable COMMA variable_list | variable

variable ::= type VARIABLE_NAME