
POINTER						'\*'
COMMA						','
OPEN_BRACKET				'('
CLOSE_BRACKET				')'
OPEN_CURLY_BRACKET			'{'
CLOSE_CURLY_BRACKET			'}'
OPEN_SQUARE_BRACKET			'['
CLOSE_SQUARE_BRACKET		']'
SEMI_COLON					';'
COLON						':'
AMPERSAND					'&'
FULL_STOP					'\.'
LESS_THAN					'<'
GREATER_THAN				'>'
EQUALS						'='
PLUS						'\+'
MINUS						'-'
MULTIPLY					'*'
DIVIDE						'/'
ESCAPE						'\\'
END_OF_LINE					'\n'
END_OF_FILE					'\0'
ESCAPE_SINGLE_QUOTES		'\\\''
ESCAPE_DOUBLE_QUOTES		'\\\"'
DOUBLE_QUOTES				'\"'
SINGLE_QUOTES				'\''
NOT							'!'
NOT_EQUALS					'!='
MODULUS						'%'
LOGICAL_EQUALS				'=='
LOGICAL_LESS_THAN_EQUALS	'<='
TYPE						'int'|'char'|'double'|'float'|'void'
TYPE_SPECIFIER_SIGNED		'signed'|'unsigned'
TYPE_SPECIFIER_LENGTH		'short'|'long'
CONST_QUALIFIER 			'const'
VOLATILE_QUALIFIER			'volatile'
CHAR_LITERAL				'\'.*\''
STRING_LITERAL				'\".*\"'
NAME						'[A-Za-z_][A-Za-z0-9_]*'
NUMBER						'[0-9]+'
CHAR						'\'[A-Za-z]\''
STRUCT						'struct'
AUTO						'auto'
BREAK						'break'
CONTINUE					'continue'
CASE						'case'
DEFAULT						'default'
DO							'do'
ELSE						'else'
ENUM						'enum'
EXTERN						'extern'
FOR							'for'
GOTO						'goto'
IF							'if'
REGISTER					'register'
RETURN						'return'
SIZEOF						'sizeof'
STATIC						'static'
SWITCH						'switch'
TYPEDEF						'typedef'
UNION						'union'
WHILE						'while'

%%

{TYPE}												{return TYPE_T(yytext);}
{NAME}												{return NAME_T(yytext);}
{NUMBER}											{return INT_T(yytext);}
{NUMBER}{FULL_STOP}{NUMBER}							{return FLOAT_T(yytext);}
{CHAR}												{return CHAR_T(yytext);}
{POINTER}											{return POINTER_T;}
{STRUCT}											{return STRUCT_T;}
{NAME}{FULL_STOP}{NAME}								{return MEMBER_T(yytext);}
{TYPE_SPECIFIER_SIGNED}								{return TYPE_SIGNED_T(yytext);}
{TYPE_SPECIFIER_LENGTH}								{return TYPE_LENGTH_T(yytext);}
{STRING_LITERAL}|{CHAR_LITERAL}						{return STRING_T(yytext);}
.													{}

%%